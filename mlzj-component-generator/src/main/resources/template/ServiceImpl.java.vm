package ${package}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import ${package}.mapper.${className}PoMapper;
import ${package}.entity.po.${className}Po;
import ${package}.service.I${className}Service;
import lombok.extern.slf4j.Slf4j;
import ${package}.dto.${moduleName}.request.*;

import ${package}.vo.${moduleName}.*;
import ${package}.utils.ObjectTools;
import java.util.List;
import javax.annotation.Resource;

/**
* @author ${author}
* @date ${datetime}
*/
@Slf4j
@Service
public class ${className}ServiceImpl extends ServiceImpl<${className}PoMapper, ${className}Po> implements I${className}Service {
    @Resource
    private ${className}PoMapper ${classname}PoMapper;

    @Override
    public void add${className}(${className}AddReqDto reqDto) {
        ${className}Po ${classname}Po = new ${className}Po();
        BeanUtils.copyProperties(reqDto, ${classname}Po);
        super.save(${classname}Po);
    }

    @Override
    public void mod${className}(${className}ModReqDto reqDto) {
        ${className}Po ${classname}Po = new ${className}Po();
        BeanUtils.copyProperties(reqDto, ${classname}Po);
        LambdaQueryWrapper<${className}Po> queryWrapper = Wrappers.lambdaQuery();
        queryWrapper.eq(${className}Po::getId, reqDto.getId());
        ${classname}PoMapper.update(${classname}Po, queryWrapper);
    }

    @Override
    public void del${className}(${className}DelReqDto reqDto) {
        ${className}Po ${classname}Po = new ${className}Po();
        BeanUtils.copyProperties(reqDto, ${classname}Po);
        LambdaQueryWrapper<${className}Po> queryWrapper = Wrappers.lambdaQuery();
        queryWrapper.eq(${className}Po::getId, reqDto.getId());
        ${classname}Po.setDelFlag(true);
        ${classname}PoMapper.update(${classname}Po, queryWrapper);

    }

    @Override
    public ${className}RspVo query${className}ById(Integer id) {
        ${className}Po ${classname}Po = getById(id);
        ${className}RspVo ${classname}RspVo = new ${className}RspVo();
        BeanUtils.copyProperties(${classname}Po, ${classname}RspVo);
        return ${classname}RspVo;
    }


    @Override
    public Page<${className}PageRspVo> query${className}ListByPage(${className}PageReqDto reqDto) {
        Page<${className}PageRspVo> page = new Page<>(reqDto.getPage(), reqDto.getSize());
        ${classname}PoMapper.query${className}ListByPage(page, reqDto);
        return page;
    }


    @Override
    public void batchUpdate(List<${className}ModReqDto> reqDtos) throws Exception{
        List<${className}Po> pos = ObjectTools.getCopyObjList(reqDtos, ${className}Po.class);
        ${classname}PoMapper.batchUpdate(pos);
    }
}